import streamlit as st
import json
import time
from datetime import datetime
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from typing import Dict, List, Optional
from gtts import gTTS
from io import BytesIO
import base64
import html

# Modern ses tanƒ±ma i√ßin g√ºvenilir bile≈üen
try:
    from streamlit_mic_recorder import speech_to_text
    MODERN_SPEECH_AVAILABLE = True
except ImportError:
    MODERN_SPEECH_AVAILABLE = False

# Agent kodunu import et (agentG2.py ile aynƒ± dizinde olmalƒ±)
try:
    from agentG2_local_lm_stduio import WebAgentAPI, EnhancedCallCenterAgent, CallCenterDatabase
except ImportError:
    st.error("‚ùå agentG2_local_lm_stduio.py dosyasƒ± bulunamadƒ±! L√ºtfen aynƒ± dizinde olduƒüundan emin olun.")
    st.stop()

# Modern Mobile-First Page Configuration
st.set_page_config(
    page_title="üìû AI √áaƒürƒ± Merkezi",
    page_icon="üìû",
    layout="centered",  # Mobil i√ßin daha uygun
    initial_sidebar_state="auto",  # Mobilde otomatik gizle
    menu_items={
        'Get Help': None,
        'Report a bug': None,
        'About': "üìû AI √áaƒürƒ± Merkezi - Modern mobil uyumlu tasarƒ±m"
    }
)

# Modern Mobil Uyumlu CSS
st.markdown("""
<style>
    /* Global Variables - Beyaz ve Mavi Tema */
    :root {
        --primary-color: #2563eb;
        --primary-light: #60a5fa;
        --primary-dark: #1d4ed8;
        --primary-gradient: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        --secondary-gradient: linear-gradient(135deg, #60a5fa 0%, #2563eb 100%);
        --light-gradient: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        --accent-gradient: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
        --surface-color: #ffffff;
        --surface-light: #f8fafc;
        --background-color: #ffffff;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --text-muted: #94a3b8;
        --border-color: #e2e8f0;
        --border-light: #f1f5f9;
        --shadow-sm: 0 1px 2px 0 rgb(59 130 246 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(59 130 246 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(59 130 246 / 0.1);
        --border-radius: 16px;
        --border-radius-sm: 8px;
    }

    /* Main Layout - Mobile First */
    .main .block-container {
        padding: 1rem 0.5rem;
        max-width: 100%;
    }

    .main {
        background: linear-gradient(to bottom, #ffffff 0%, #f8fafc 100%);
        font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    /* Mobile Header */
    .mobile-header {
        background: var(--primary-gradient);
        color: white;
        padding: 1.5rem 1rem;
        border-radius: 0 0 24px 24px;
        margin: -1rem -1rem 2rem -1rem;
        text-align: center;
        box-shadow: var(--shadow-lg);
    }

    .mobile-header h1 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 700;
    }

    .mobile-header p {
        margin: 0.5rem 0 0 0;
        opacity: 0.9;
        font-size: 0.9rem;
    }

    /* Chat Container - iPhone Style */
    .chat-container {
        background: var(--surface-color);
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 1rem 0;
        box-shadow: var(--shadow-md);
        min-height: 400px;
        max-height: 60vh;
        overflow-y: auto;
    }

    /* Chat Messages - WhatsApp Style */
    .chat-message {
        margin: 0.75rem 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        animation: slideIn 0.3s ease-out;
    }

    .user-message {
        align-self: flex-end;
        background: var(--primary-gradient);
        color: white;
        padding: 0.75rem 1rem;
        border-radius: 20px 20px 6px 20px;
        max-width: 85%;
        margin-left: auto;
        word-wrap: break-word;
        box-shadow: var(--shadow-md);
    }

    .assistant-message {
        align-self: flex-start;
        background: var(--surface-color);
        color: var(--text-primary);
        padding: 0.75rem 1rem;
        border-radius: 20px 20px 20px 6px;
        max-width: 85%;
        margin-right: auto;
        border: 2px solid var(--border-light);
        word-wrap: break-word;
        box-shadow: var(--shadow-sm);
    }

    .system-message {
        align-self: center;
        background: var(--accent-gradient);
        color: var(--primary-dark);
        padding: 0.5rem 1rem;
        border-radius: 16px;
        max-width: 90%;
        text-align: center;
        font-size: 0.85rem;
        font-style: italic;
        margin: 1rem auto;
        border: 1px solid var(--border-color);
    }

    .message-meta {
        font-size: 0.7rem;
        color: var(--text-muted);
        margin-top: 0.25rem;
        text-align: right;
    }

    /* Input Area - Modern Mobile */
    .input-container {
        background: var(--surface-color);
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 1rem 0;
        box-shadow: var(--shadow-md);
        position: sticky;
        bottom: 1rem;
        border: 1px solid var(--border-light);
    }

    .stTextInput > div > div > input {
        border-radius: 24px !important;
        border: 2px solid var(--border-color) !important;
        padding: 0.75rem 1rem !important;
        font-size: 1rem !important;
        background: var(--surface-light) !important;
        transition: all 0.2s ease !important;
    }

    .stTextInput > div > div > input:focus {
        border-color: var(--primary-color) !important;
        box-shadow: 0 0 0 3px rgb(37 99 235 / 0.1) !important;
        background: var(--surface-color) !important;
    }

    /* Buttons - iOS Style */
    .stButton > button {
        background: var(--primary-gradient) !important;
        color: white !important;
        border: none !important;
        border-radius: 24px !important;
        padding: 0.75rem 1.5rem !important;
        font-weight: 600 !important;
        font-size: 1rem !important;
        transition: all 0.2s ease !important;
        box-shadow: var(--shadow-sm) !important;
        width: 100% !important;
    }

    .stButton > button:hover {
        transform: translateY(-1px) !important;
        box-shadow: var(--shadow-md) !important;
    }

    .stButton > button:active {
        transform: translateY(0) !important;
    }

    /* Voice Controls - Floating Action Button Style */
    .voice-controls {
        background: var(--surface-color);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: var(--shadow-md);
        text-align: center;
        border: 1px solid var(--border-light);
    }

    .voice-button {
        background: var(--secondary-gradient) !important;
        color: white !important;
        border: none !important;
        border-radius: 50% !important;
        width: 80px !important;
        height: 80px !important;
        font-size: 2rem !important;
        margin: 0.5rem !important;
        transition: all 0.3s ease !important;
        box-shadow: var(--shadow-lg) !important;
    }

    .voice-button:hover {
        transform: scale(1.05) !important;
        box-shadow: 0 20px 25px -5px rgb(37 99 235 / 0.2) !important;
        background: var(--primary-gradient) !important;
    }

    /* Status Cards - Material Design */
    .status-card {
        background: var(--surface-color);
        border-radius: var(--border-radius);
        padding: 1rem;
        margin: 0.5rem 0;
        box-shadow: var(--shadow-sm);
        border-left: 4px solid var(--primary-color);
        border: 1px solid var(--border-light);
    }

    .status-active {
        color: var(--primary-color);
        font-weight: 600;
    }

    .status-inactive {
        color: var(--text-muted);
        font-weight: 600;
    }

    /* Sidebar - Mobile Drawer Style */
    .sidebar .sidebar-content {
        background: var(--surface-color) !important;
        border-radius: 0 var(--border-radius) var(--border-radius) 0 !important;
    }

    /* Metrics - Cards */
    .metric-card {
        background: var(--surface-color);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin: 0.5rem 0;
        box-shadow: var(--shadow-sm);
        border: 1px solid var(--border-color);
        text-align: center;
        transition: all 0.2s ease;
    }

    .metric-card:hover {
        box-shadow: var(--shadow-md);
        transform: translateY(-1px);
    }

    /* Animations */
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
    }

    .recording {
        animation: pulse 1.5s infinite;
        background: var(--primary-gradient) !important;
        border-color: var(--primary-light) !important;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .main .block-container {
            padding: 0.5rem;
        }
        
        .chat-container {
            margin: 0.5rem 0;
            border-radius: var(--border-radius-sm);
        }
        
        .user-message, .assistant-message {
            max-width: 90%;
        }
        
        .mobile-header {
            margin: -0.5rem -0.5rem 1rem -0.5rem;
        }
    }

    /* Dark mode support - Mavi tonlarƒ± korunur */
    @media (prefers-color-scheme: dark) {
        :root {
            --surface-color: #1e293b;
            --surface-light: #334155;
            --background-color: #0f172a;
            --text-primary: #f1f5f9;
            --text-secondary: #cbd5e1;
            --text-muted: #94a3b8;
            --border-color: #475569;
            --border-light: #334155;
            --light-gradient: linear-gradient(135deg, #334155 0%, #475569 100%);
            --accent-gradient: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
        }
        
        .main {
            background: linear-gradient(to bottom, #0f172a 0%, #1e293b 100%);
        }
    }

    /* Loading States */
    .loading {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: loading 1.5s infinite;
    }

    @keyframes loading {
        0% { background-position: 200% 0; }
        100% { background-position: -200% 0; }
    }

    /* Hide Streamlit default elements for cleaner mobile look */
    .stDeployButton {display: none;}
    header[data-testid="stHeader"] {display: none;}
    div[data-testid="stToolbar"] {display: none;}
    .stActionButton {display: none;}
    
    /* Custom scrollbar */
    .chat-container::-webkit-scrollbar {
        width: 4px;
    }
    
    .chat-container::-webkit-scrollbar-track {
        background: var(--background-color);
    }
    
    .chat-container::-webkit-scrollbar-thumb {
        background: var(--border-color);
        border-radius: 2px;
    }
</style>
""", unsafe_allow_html=True)

# Session state initialization
if 'web_api' not in st.session_state:
    st.session_state.web_api = None
    st.session_state.agent_initialized = False
    st.session_state.conversation_active = False
    st.session_state.chat_history = []
    st.session_state.current_session_id = None
    st.session_state.customer_id = None
    st.session_state.current_layer = "dispatcher"
    st.session_state.current_specialist = None
    st.session_state.voice_mode = False
    st.session_state.is_recording = False
    st.session_state.auto_play_response = True
    st.session_state.pending_audio = None

def initialize_agent():
    """Agent'ƒ± ba≈ülatƒ±r"""
    if not st.session_state.agent_initialized:
        with st.spinner("ü§ñ AI Agent ba≈ülatƒ±lƒ±yor..."):
            st.session_state.web_api = WebAgentAPI()
            result = st.session_state.web_api.initialize_agent()
            
            if result['success']:
                st.session_state.agent_initialized = True
                st.success("‚úÖ AI Agent ba≈üarƒ±yla ba≈ülatƒ±ldƒ±!")
                return True
            else:
                st.error(f"‚ùå Agent ba≈ülatƒ±lamadƒ±: {result['message']}")
                return False
    return True

def start_conversation(customer_id=None):
    """Yeni bir konu≈üma ba≈ülatƒ±r"""
    if st.session_state.web_api:
        result = st.session_state.web_api.start_conversation(customer_id)
        if result['success']:
            st.session_state.conversation_active = True
            st.session_state.current_session_id = result['session_id']
            st.session_state.customer_id = customer_id
            st.session_state.chat_history = []
            st.session_state.current_layer = "dispatcher"
            st.session_state.current_specialist = None
            
            # ƒ∞lk kar≈üƒ±lama mesajƒ±nƒ± ekle - system mesajƒ± olarak
            add_message("system", result['message'], "system")
            return True
        else:
            st.error(f"‚ùå Konu≈üma ba≈ülatƒ±lamadƒ±: {result['message']}")
            return False
    return False

def send_message(message):
    """Mesaj g√∂nderir ve yanƒ±tƒ± alƒ±r"""
    if st.session_state.web_api and st.session_state.conversation_active:
        # Kullanƒ±cƒ± mesajƒ±nƒ± ekle
        add_message("user", message)
        
        # AI yanƒ±tƒ±nƒ± al
        with st.spinner("ü§î AI d√º≈ü√ºn√ºyor..."):
            result = st.session_state.web_api.send_message(message)
            
        if result['success']:
            # Layer bilgilerini g√ºncelle
            st.session_state.current_layer = result.get('layer', 'dispatcher')
            st.session_state.current_specialist = result.get('specialist')
            
            # AI yanƒ±tƒ±nƒ± ekle
            add_message("assistant", result['response'])
            
            # Eƒüer sesli mod aktifse ve otomatik √ßalma a√ßƒ±ksa, yanƒ±tƒ± sesli olarak √ßal
            if st.session_state.voice_mode and st.session_state.auto_play_response:
                with st.spinner("üîä Yanƒ±t seslendirilƒ±yor..."):
                    audio_base64 = text_to_speech(result['response'])
                    if audio_base64:
                        # Session state'e ses dosyasƒ±nƒ± kaydet ki sayfa yenilendiƒüinde √ßalabilsin
                        st.session_state.pending_audio = audio_base64
            
            return True
        else:
            st.error(f"‚ùå Mesaj g√∂nderilemedi: {result['message']}")
            return False
    return False

def add_message(role, content, msg_type="normal"):
    """Chat ge√ßmi≈üine mesaj ekler"""
    timestamp = datetime.now().strftime("%H:%M")
    
    st.session_state.chat_history.append({
        'role': role,
        'content': content,
        'timestamp': timestamp,
        'type': msg_type
    })

def text_to_speech(text):
    """Metni sesli konu≈ümaya d√∂n√º≈üt√ºr√ºr"""
    try:
        # Metni temizle (HTML etiketlerini kaldƒ±r)
        clean_text = html.unescape(text).strip()
        if not clean_text:
            st.warning("‚ö†Ô∏è Bo≈ü metin, ses olu≈üturulamadƒ±")
            return None
            
        # gTTS ile ses olu≈ütur
        tts = gTTS(text=clean_text, lang='tr', slow=False)
        
        # Bellek i√ßi dosya olu≈ütur
        audio_buffer = BytesIO()
        tts.write_to_fp(audio_buffer)
        audio_buffer.seek(0)
        
        # Base64 encode
        audio_base64 = base64.b64encode(audio_buffer.read()).decode()
        return audio_base64
    except Exception as e:
        st.error(f"Ses olu≈üturma hatasƒ±: {str(e)}")
        return None

def play_audio(audio_base64):
    """Streamlit native audio player kullanarak ses √ßalar"""
    if audio_base64:
        # Base64'√º bytes'a √ßevir
        audio_bytes = base64.b64decode(audio_base64)
        
        # Autoplay sorunlarƒ± i√ßin manuel kontrol de ekle
        col1, col2 = st.columns([3, 1])
        with col1:
            # Streamlit'in native audio widget'ƒ±nƒ± kullan
            st.audio(audio_bytes, format='audio/mp3', autoplay=True)
        with col2:
            if st.button("‚ñ∂Ô∏è Oynat", key=f"play_{hash(audio_base64)}", help="Ses otomatik ba≈ülamazsa bu butona tƒ±klayƒ±n"):
                st.audio(audio_bytes, format='audio/mp3', autoplay=True)

def create_modern_speech_component():
    """Modern ve g√ºvenilir ses tanƒ±ma bile≈üeni"""
    if not MODERN_SPEECH_AVAILABLE:
        st.error("‚ùå st-mic-recorder y√ºkl√º deƒüil!")
        return None
    
    voice_text = speech_to_text(
        language='tr-TR',
        start_prompt="üé§ Konu≈ümaya Ba≈üla",
        stop_prompt="‚èπÔ∏è Durdur", 
        just_once=True,
        use_container_width=False,
        key="voice_input"
    )
    
    return voice_text

def create_speech_recognition_component():
    """Tarayƒ±cƒ± tabanlƒ± ses tanƒ±ma bile≈üeni olu≈üturur (fallback)"""
    speech_js = """
    <div style="text-align: center; margin: 10px 0;">
        <button id="startRecord" onclick="startRecording()" 
                style="background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%); 
                       color: white; border: none; padding: 12px 24px; 
                       border-radius: 25px; font-weight: 500; cursor: pointer; 
                       margin: 5px; box-shadow: 0 4px 15px rgba(0,0,0,0.2);">
            üé§ Konu≈ümaya Ba≈üla
        </button>
        <button id="stopRecord" onclick="stopRecording()" disabled
                style="background: linear-gradient(135deg, #95e1d3 0%, #fce38a 100%); 
                       color: #333; border: none; padding: 12px 24px; 
                       border-radius: 25px; font-weight: 500; cursor: pointer; 
                       margin: 5px; box-shadow: 0 4px 15px rgba(0,0,0,0.2);">
            ‚èπÔ∏è Durdur
        </button>
    </div>
    <div id="recordingStatus" style="text-align: center; margin: 10px 0; font-weight: 500;"></div>
    
    <script>
    let recognition;
    let isRecording = false;
    
    function startRecording() {
        console.log('startRecording √ßaƒürƒ±ldƒ±');
        
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'tr-TR';
            recognition.continuous = false;
            recognition.interimResults = false;
            
            console.log('Speech recognition olu≈üturuldu, dil: tr-TR');
            
            recognition.onstart = function() {
                console.log('Kayƒ±t ba≈üladƒ±');
                isRecording = true;
                document.getElementById('startRecord').disabled = true;
                document.getElementById('stopRecord').disabled = false;
                document.getElementById('recordingStatus').innerHTML = 
                    '<span style="color: #ff6b6b;">üî¥ Kaydediliyor... L√ºtfen konu≈üun</span>';
            };
            
            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript;
                document.getElementById('recordingStatus').innerHTML = 
                    '<span style="color: #28a745;">‚úÖ Kaydedildi: "' + transcript + '"</span>';
                
                // Streamlit'e sonucu g√∂nder - form i√ßindeki input i√ßin g√ºncellenmi≈ü selector'lar
                let textInput = parent.document.querySelector('form input[placeholder*="yazƒ±n"]') ||
                               parent.document.querySelector('form input[type="text"]') ||
                               parent.document.querySelector('input[placeholder*="yazƒ±n"]') ||
                               parent.document.querySelector('input[type="text"]');
                
                if (textInput) {
                    textInput.value = transcript;
                    textInput.dispatchEvent(new Event('input', { bubbles: true }));
                    textInput.dispatchEvent(new Event('change', { bubbles: true }));
                    
                                         // Form submit button'a tƒ±kla - g√ºvenilir selector
                     setTimeout(() => {
                         const sendButton = parent.document.querySelector('form button[type="submit"]') ||
                                          parent.document.querySelector('button[type="submit"]');
                         if (sendButton) {
                             sendButton.click();
                         } else {
                             console.log('Send button bulunamadƒ± - form yapƒ±sƒ± deƒüi≈ümi≈ü olabilir');
                         }
                     }, 200);
                } else {
                    console.log('Form text input bulunamadƒ±');
                }
                stopRecording();
            };
            
            recognition.onerror = function(event) {
                console.log('Speech recognition hatasƒ±:', event.error);
                let errorMessage = '';
                switch(event.error) {
                    case 'not-allowed':
                        errorMessage = 'Mikrofon izni verilmedi';
                        break;
                    case 'no-speech':
                        errorMessage = 'Ses algƒ±lanamadƒ±';
                        break;
                    case 'network':
                        errorMessage = 'Aƒü baƒülantƒ±sƒ± hatasƒ±';
                        break;
                    case 'service-not-allowed':
                        errorMessage = 'Servis izni yok';
                        break;
                    default:
                        errorMessage = event.error;
                }
                document.getElementById('recordingStatus').innerHTML = 
                    '<span style="color: #dc3545;">‚ùå Hata: ' + errorMessage + '</span>';
                stopRecording();
            };
            
            recognition.onend = function() {
                stopRecording();
            };
            
            try {
                recognition.start();
                console.log('Recognition ba≈ülatƒ±ldƒ±');
            } catch (error) {
                console.log('Recognition ba≈ülatma hatasƒ±:', error);
                document.getElementById('recordingStatus').innerHTML = 
                    '<span style="color: #dc3545;">‚ùå Ba≈ülatma hatasƒ±: ' + error.message + '</span>';
            }
        } else {
            console.log('Speech recognition desteklenmiyor');
            alert('Tarayƒ±cƒ±nƒ±z ses tanƒ±mayƒ± desteklemiyor! Chrome tarayƒ±cƒ±sƒ± kullanƒ±n.');
        }
    }
    
    function stopRecording() {
        if (recognition && isRecording) {
            recognition.stop();
        }
        isRecording = false;
        document.getElementById('startRecord').disabled = false;
        document.getElementById('stopRecord').disabled = true;
        
        if (document.getElementById('recordingStatus').innerHTML.indexOf('‚úÖ') === -1) {
            document.getElementById('recordingStatus').innerHTML = 
                '<span style="color: #6c757d;">‚èπÔ∏è Kayƒ±t durduruldu</span>';
        }
    }
    </script>
    """
    
    return speech_js

def end_conversation():
    """Konu≈ümayƒ± sonlandƒ±rƒ±r"""
    if st.session_state.web_api and st.session_state.conversation_active:
        satisfaction = st.session_state.get('satisfaction_rating', None)
        notes = st.session_state.get('session_notes', None)
        
        result = st.session_state.web_api.end_conversation(satisfaction, notes)
        
        if result['success']:
            st.session_state.conversation_active = False
            st.session_state.current_session_id = None
            st.session_state.customer_id = None
            add_message("system", "G√∂r√º≈üme sonlandƒ±rƒ±ldƒ±", "system")
            return result.get('report', {})
        else:
            st.error(f"‚ùå Konu≈üma sonlandƒ±rƒ±lamadƒ±: {result['message']}")
    return None

def display_chat():
    """Modern mobil uyumlu chat aray√ºz√º"""
    # Chat container with modern styling
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    
    # Chat messages
    for msg in st.session_state.chat_history:
        timestamp = msg['timestamp']
        content = msg['content']
        role = msg['role']
        msg_type = msg.get('type', 'normal')
        
        if role == "user":
            st.markdown(f"""
            <div class="chat-message">
                <div class="user-message">
                    {content}
                    <div class="message-meta">{timestamp}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
        elif role == "assistant":
            # Specialist info for better UX
            specialist_emoji = ""
            if st.session_state.current_layer == "specialist" and st.session_state.current_specialist:
                specialist_emojis = {
                    "billing": "üí∞",
                    "package_management": "üì¶", 
                    "user_info": "üë§",
                    "general_inquiry": "üí¨"
                }
                specialist_emoji = specialist_emojis.get(st.session_state.current_specialist, "ü§ñ")
            else:
                specialist_emoji = "ü§ñ"
            
            st.markdown(f"""
            <div class="chat-message">
                <div class="assistant-message">
                    <div style="display: flex; align-items: center; margin-bottom: 0.25rem;">
                        <span style="margin-right: 0.5rem;">{specialist_emoji}</span>
                        <small style="color: var(--text-secondary); font-weight: 500;">AI Asistan</small>
                    </div>
                    {content}
                    <div class="message-meta">{timestamp}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
        elif role == "system":
            st.markdown(f"""
            <div class="chat-message">
                <div class="system-message">
                    ‚ÑπÔ∏è {content}
                    <div class="message-meta" style="text-align: center; color: rgba(255,255,255,0.8);">{timestamp}</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)

def main():
    # Modern Mobile Header
    st.markdown("""
    <div class="mobile-header">
        <h1>üìû AI √áaƒürƒ± Merkezi</h1>
        <p>Sesli sohbet destekli yapay zeka asistanƒ±</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Modern Sidebar
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center; padding: 1rem 0;">
            <h2 style="color: var(--primary-color); margin: 0;">üéõÔ∏è Kontrol</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Kullanƒ±lan Model Bilgisi
        st.markdown("""
        <div class="status-card" style="background: var(--accent-gradient); color: var(--primary-dark); margin-bottom: 1rem;">
            <div style="text-align: center;">
                <strong>ü§ñ Kullanƒ±lan Model</strong><br/>
                <code style="background: rgba(255,255,255,0.8); padding: 0.25rem 0.5rem; border-radius: 6px; font-size: 0.85rem;">gemma-3-12b-it</code>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Agent durumu
        if st.session_state.agent_initialized:
            st.markdown('<p class="status-active">üü¢ Agent Aktif</p>', unsafe_allow_html=True)
        else:
            st.markdown('<p class="status-inactive">üî¥ Agent Pasif</p>', unsafe_allow_html=True)
        
        st.divider()
        
        # Agent ba≈ülatma
        if not st.session_state.agent_initialized:
            if st.button("üöÄ Agent'ƒ± Ba≈ülat", type="primary"):
                initialize_agent()
        
        # Konu≈üma kontrollarƒ±
        if st.session_state.agent_initialized:
            st.subheader("üí¨ Konu≈üma Y√∂netimi")
            
            # M√º≈üteri ID giri≈üi
            customer_id = st.text_input("üë§ M√º≈üteri ID", placeholder="√ñrn: 1001, 1002, 1003")
            
            if not st.session_state.conversation_active:
                if st.button("üÜï Yeni Konu≈üma Ba≈ülat", type="primary"):
                    start_conversation(customer_id if customer_id else None)
            else:
                st.success(f"üì± Aktif Konu≈üma: {st.session_state.current_session_id}")
                if st.session_state.customer_id:
                    st.info(f"üë§ M√º≈üteri: {st.session_state.customer_id}")
                
                # Layer bilgisi
                layer_display = st.session_state.current_layer.title()
                if st.session_state.current_specialist:
                    specialist_names = {
                        "billing": "Fatura Uzmanƒ±",
                        "package_management": "Paket Uzmanƒ±",
                        "user_info": "Bilgi Uzmanƒ±",
                        "general_inquiry": "Genel Asistan"
                    }
                    layer_display = specialist_names.get(st.session_state.current_specialist, "Uzman")
                
                st.markdown(f'<div class="layer-indicator">üéØ {layer_display}</div>', unsafe_allow_html=True)
                
                if st.button("üèÅ Konu≈ümayƒ± Sonlandƒ±r", type="secondary"):
                    report = end_conversation()
                    if report:
                        st.success("‚úÖ Konu≈üma ba≈üarƒ±yla sonlandƒ±rƒ±ldƒ±")
        
        st.divider()
        
        # Sesli sohbet kontrolleri
        if st.session_state.conversation_active:
            st.subheader("üé§ Sesli Sohbet")
            
            # Sesli mod toggle
            voice_mode = st.toggle(
                "Sesli Mod", 
                value=st.session_state.voice_mode,
                help="Sesli konu≈üma modunu a√ßar/kapatƒ±r"
            )
            st.session_state.voice_mode = voice_mode
            
            if voice_mode:
                # Otomatik √ßalma ayarƒ±
                auto_play = st.checkbox(
                    "Yanƒ±tlarƒ± otomatik seslendir", 
                    value=st.session_state.auto_play_response,
                    help="AI yanƒ±tlarƒ±nƒ± otomatik olarak sesli √ßalar"
                )
                st.session_state.auto_play_response = auto_play
                
                # Durum g√∂stergesi
                if st.session_state.voice_mode:
                    st.success("üü¢ Sesli mod aktif")
                    st.info("üí° Mikrofon butonuna tƒ±klayarak konu≈üabilirsiniz")
            else:
                st.info("üîá Sadece metin modu aktif")
        
        st.divider()
        
        # Hƒ±zlƒ± eylemler
        if st.session_state.conversation_active:
            st.subheader("‚ö° Hƒ±zlƒ± Eylemler")
            
            quick_actions = [
                "M√º≈üteri bilgilerimi g√∂ster",
                "Mevcut paketleri listele", 
                "Fatura bilgilerimi g√∂ster",
                "Kullanƒ±m istatistiklerimi g√∂ster",
                "Ana men√ºye d√∂n"
            ]
            
            for action in quick_actions:
                if st.button(action, key=f"quick_{action}"):
                    send_message(action)
        
        st.divider()
        
        # Sistem durumu
        st.subheader("üîç Sistem Durumu")
        try:
            import requests
            # API saƒülƒ±k kontrol√º
            response = requests.get("http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                st.success("üü¢ Backend API Aktif")
            else:
                st.warning("üü° Backend API Uyarƒ±")
        except:
            st.error("üî¥ Backend API Pasif")
        
        # Database kontrol√º
        try:
            db = CallCenterDatabase("call_center.db")
            st.success("üü¢ Veritabanƒ± Aktif")
        except:
            st.error("üî¥ Veritabanƒ± Hatasƒ±")

    # Ana i√ßerik alanƒ±
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Chat alanƒ±
        st.subheader("üí¨ Konu≈üma")
        
        if st.session_state.conversation_active:
            # Chat ge√ßmi≈üi
            chat_container = st.container()
            with chat_container:
                display_chat()
            
            # Modern Voice Input Section
            if st.session_state.voice_mode:
                st.markdown("""
                <div class="voice-controls">
                    <h3 style="text-align: center; color: var(--text-primary); margin-bottom: 1rem;">üé§ Sesli Girdi</h3>
                </div>
                """, unsafe_allow_html=True)
                
                # Modern speech component kullan (g√ºvenilir)
                if MODERN_SPEECH_AVAILABLE:
                    voice_text = create_modern_speech_component()
                    if voice_text:
                        st.markdown(f"""
                        <div class="status-card" style="background: var(--secondary-gradient); color: white;">
                            <strong>‚úÖ Ses Algƒ±landƒ±:</strong><br/>"{voice_text}"
                        </div>
                        """, unsafe_allow_html=True)
                        send_message(voice_text)
                        st.rerun()
                else:
                    # Fallback: JavaScript tabanlƒ± (kƒ±rƒ±lgan)
                    st.markdown("""
                    <div class="status-card" style="background: var(--accent-gradient); color: var(--primary-dark);">
                        ‚ö†Ô∏è Modern ses tanƒ±ma yok, JavaScript fallback kullanƒ±lƒ±yor
                    </div>
                    """, unsafe_allow_html=True)
                    st.markdown(create_speech_recognition_component(), unsafe_allow_html=True)
            
            # Modern Message Input
            st.markdown("""
            <div class="input-container">
            """, unsafe_allow_html=True)
            
            # Form kullanarak input temizleme sorununu √ß√∂z
            with st.form(key="message_form", clear_on_submit=True):
                user_message = st.text_input(
                    "Mesajƒ±nƒ±zƒ± yazƒ±n...", 
                    placeholder="üí¨ Merhaba, size nasƒ±l yardƒ±mcƒ± olabilirim?",
                    label_visibility="collapsed"
                )
                
                send_clicked = st.form_submit_button("üì§ G√∂nder", type="primary", use_container_width=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Mesaj g√∂nderme
            if user_message and send_clicked:
                send_message(user_message)
                st.rerun()
        
        else:
            st.markdown("""
            <div class="alert-info">
                <h4>üëã Ho≈ü geldiniz!</h4>
                <p>AI √áaƒürƒ± Merkezi Asistanƒ±'na ho≈ü geldiniz. Ba≈ülamak i√ßin:</p>
                <ol>
                    <li>Soldaki panelden <strong>"Agent'ƒ± Ba≈ülat"</strong> butonuna tƒ±klayƒ±n</li>
                    <li>M√º≈üteri ID'si girin (isteƒüe baƒülƒ±)</li>
                    <li><strong>"Yeni Konu≈üma Ba≈ülat"</strong> butonuna tƒ±klayƒ±n</li>
                </ol>
                <p><strong>Test M√º≈üteri ID'leri:</strong> 1001, 1002, 1003</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col2:
        # Bilgi paneli
        st.subheader("üìä Bilgi Paneli")
        
        if st.session_state.conversation_active:
            # Konu≈üma istatistikleri
            total_messages = len(st.session_state.chat_history)
            user_messages = len([m for m in st.session_state.chat_history if m['role'] == 'user'])
            assistant_messages = len([m for m in st.session_state.chat_history if m['role'] == 'assistant'])
            
            st.metric("üí¨ Toplam Mesaj", total_messages)
            st.metric("üë§ M√º≈üteri Mesajlarƒ±", user_messages)
            st.metric("ü§ñ AI Yanƒ±tlarƒ±", assistant_messages)
            
            # Sesli mod durumu
            if st.session_state.voice_mode:
                st.metric("üé§ Sesli Mod", "Aktif")
            else:
                st.metric("üîá Sesli Mod", "Pasif")
            
            st.divider()
            
            # Mevcut katman bilgisi
            st.subheader("üéØ Aktif Katman")
            if st.session_state.current_layer == "dispatcher":
                st.info("üîÄ **Y√∂nlendirme Katmanƒ±**\nM√º≈üteri talebi analiz ediliyor ve uygun uzmana y√∂nlendiriliyor.")
            elif st.session_state.current_layer == "specialist":
                specialist_info = {
                    "billing": ("üí∞", "Fatura Uzmanƒ±", "Fatura sorgularƒ± ve √∂demeleri"),
                    "package_management": ("üì¶", "Paket Uzmanƒ±", "Paket deƒüi≈üiklikleri ve kar≈üƒ±la≈ütƒ±rma"),
                    "user_info": ("üë§", "Bilgi Uzmanƒ±", "Kullanƒ±cƒ± bilgileri ve istatistikler"),
                    "general_inquiry": ("üí¨", "Genel Asistan", "Genel sorular ve y√∂nlendirme")
                }
                
                if st.session_state.current_specialist in specialist_info:
                    icon, name, desc = specialist_info[st.session_state.current_specialist]
                    st.success(f"{icon} **{name}**\n{desc}")
            
            st.divider()
            
            # Yardƒ±m
            st.subheader("‚ùì Yardƒ±m")
            st.markdown("""
            **üìù Metin Komutlarƒ±:**
            - "M√º≈üteri bilgilerimi g√∂ster"
            - "Faturamƒ± √∂demek istiyorum"
            - "Yeni paketleri g√∂ster"
            - "Kullanƒ±m istatistiklerimi g√∂ster"
            - "Ana men√º" (geri d√∂nmek i√ßin)
            
            **üé§ Sesli Sohbet:**
            1. Sesli Mod'u a√ßƒ±n
            2. "Konu≈ümaya Ba≈üla" butonuna tƒ±klayƒ±n
            3. T√ºrk√ße konu≈üun
            4. AI yanƒ±tƒ±nƒ± hem metin hem ses olarak alƒ±n
            
            **üí° ƒ∞pu√ßlarƒ±:**
            - Mikrofon izni vermeyi unutmayƒ±n
            - Sessiz bir ortamda konu≈üun
            - Net ve anla≈üƒ±lƒ±r konu≈üun
            """)
        
        else:
            st.info("üîÑ Konu≈üma ba≈ülatƒ±ldƒ±ƒüƒ±nda burada detaylar g√∂r√ºnecek.")
    
    # Bekleyen ses dosyasƒ± varsa √ßal (sayfa yenilendikten sonra)
    if st.session_state.get('pending_audio'):
        # Ses oynatƒ±cƒ±sƒ±nƒ± sidebar'da g√∂ster - daha temiz g√∂r√ºn√ºm
        with st.sidebar:
            st.markdown("---")
            current_time = datetime.now().strftime("%H:%M:%S")
            st.markdown(f"**üîä AI Yanƒ±tƒ± ({current_time})**")
            play_audio(st.session_state.pending_audio)
        st.session_state.pending_audio = None

if __name__ == "__main__":
    main()